Prerequisites on VM1
	Ubuntu or similar OS
	Node.js & Yarn (sudo apt-get install -y nodejs yarn)
	Docker (for building images)
	Git
	Access to Azure, GitHub, and ACR credentials
	
Node.js & Yarn (sudo apt-get install -y nodejs yarn)
	sudo apt-get update
	sudo apt-get upgrade -y
	
	curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
	sudo apt-get install -y nodejs
	
	Verify Node.js:
		node -v
		npm -v
	
	Yarn:
	
		sudo npm install -g yarn
		yarn -v
	
Install Docker:
	
	sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	echo \
	  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
	  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

		sudo apt-get update
		sudo apt-get install -y docker-ce docker-ce-cli containerd.io
	
		sudo usermod -aG docker $USER
		# You may need to log out and log back in for this to take effect

Install Git:
	sudo apt-get install -y git
	git --version


Azure CLI
	curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
	
	az --version
	
Access to Azure, GitHub, and ACR Credentials
	az login
	
	Personal GitHub account or org, and a Personal Access Token (PAT) with repo access.
	
Get your ACR login server name from Azure Portal (e.g., myregistry.azurecr.io).


Install and Set Up Backstage
	npx @backstage/create-app
	cd backstage-dev
	yarn install
	yarn start
	
	ssh -L 3000:localhost:3000 azureuser@172.191.189.70


/home/azureuser/python-app
	vi app.py
		from flask import Flask
		app = Flask(__name__)
		@app.route("/")
		def hello():
			return "Hello from Backstage Python app!"
		if __name__ == "__main__":
			app.run(host="0.0.0.0", port=80)
	
	vi requirements.txt
		flask
	vi Dockerfile
			FROM python:3.11-slim
			WORKDIR /app
			COPY requirements.txt .
			RUN pip install -r requirements.txt
			COPY . .
			CMD ["python", "app.py"]

Initialize Git and Push to GitHub
	cd /home/azureuser/python-app
	git init
	git add .
	git commit -m "Initial commit"

Add Remote & Push:
	git remote add origin https://github.com/arvindinfa/python-app.git
	git branch -M main
	git push -u origin main


PAT:

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

Log In to Azure and ACR
	az login
	az acr login --name acrtestrg001 --expose-token
	or docker login acrtestrg001.azurecr.io
	username : acrtestrg001
	password : sZ1e/ksMIwsVo9mxiY71LxzNYFHRq0Rabo1s2xaHuU+ACRAjZaws
	
	
Build and Push
	cd /home/azureuser/python-app
	docker build -t acrtestrg001.azurecr.io/python-app:latest .
	docker push acrtestrg001.azurecr.io/python-app:latest



Now VM2
Install Minikube

	curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
	sudo install minikube-linux-amd64 /usr/local/bin/minikube
	
Install Docker
	sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	echo \
	  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
	  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

		sudo apt-get update
		sudo apt-get install -y docker-ce docker-ce-cli containerd.io
	
		sudo usermod -aG docker $USER
		# You may need to log out and log back in for this to take effect
	
minikube start --driver=docker
	========================== Done
Install ArgoCD
	sudo snap install kubectl --classic
	kubectl create namespace argocd
	kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
	kubectl port-forward svc/argocd-server -n argocd 8080:443
	
azureuser@vm2:~$ kubectl get pods -n argocd
NAME                                                READY   STATUS    RESTARTS   AGE
argocd-application-controller-0                     1/1     Running   0          62s
argocd-applicationset-controller-655cc58ff8-m7bw2   1/1     Running   0          63s
argocd-dex-server-7d9dfb4fb8-4qdvw                  1/1     Running   0          63s
argocd-notifications-controller-6c6848bc4c-2jzdm    1/1     Running   0          63s
argocd-redis-656c79549c-s8k9t                       1/1     Running   0          63s
argocd-repo-server-856b768fd9-q2484                 1/1     Running   0          63s
argocd-server-99c485944-w8j8c                       1/1     Running   0          62s

deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-app
  template:
    metadata:
      labels:
        app: python-app
    spec:
      containers:
        - name: python-app
          image: acrtestrg001.azurecr.io/python-app:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: python-app-service
spec:
  selector:
    app: python-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer


azureuser@vm2:~$ kubectl apply -f deployment.yaml
deployment.apps/python-app created
service/python-app-service created



kubectl get secret argocd-initial-admin-secret -n argocd -o yaml

			azureuser@vm2:~$ kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
			apiVersion: v1
			data:
			  password: dC1qVE01cHljN1liOERLSg==
			kind: Secret
			metadata:
			  creationTimestamp: "2025-06-19T16:57:11Z"
			  name: argocd-initial-admin-secret
			  namespace: argocd
			  resourceVersion: "765"
			  uid: 48e57e27-38ec-4872-94f0-fe9158d56cc8
			type: Opaque

=========================
Done .. Code is GitHub
https://github.com/arvindinfa/python-app

Automate building and pushing your Python app Docker image to Azure Container Registry (ACR) using an Azure DevOps pipeline.

In Azure Devops .. Project Settings .. Service Connections
	New Service Connection --> docker registry --> Click Next
		Registry Type --> Azure Container Registry
			Authentication Type --> Service Principal
				Choose Subscription and Choose ACR --> Choose Setup
				
=========================
Done ..

Github repo to Azure Repos

		Files --> Import --> https://github.com/arvindinfa/python-app
		

trigger:
  branches:
    include:
      - main

variables:
  # Change this to your ACR login server (example: myregistry.azurecr.io)
  ACR_LOGIN_SERVER: 'acrtestrg001.azurecr.io'
  IMAGE_NAME: 'python-app'

stages:
- stage: BuildAndPush
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: Docker@2
      displayName: Build and Push Docker image
      inputs:
        command: buildAndPush
        repository: 'acrtestrg001/python-app'
        dockerfile: 'Dockerfile'
        containerRegistry: 'conn_1'
        tags: |
          $(Build.BuildId)






vm2: 172.190.8.139
vm1: 172.191.189.70

https://chatgpt.com/share/6853f11f-04f4-800f-b99a-c7fc3bbe0d0e

locations:
   - type: url
     target: https://github.com/arvindinfa/python-app/blob/main/catalog-info.yaml

https://raw.githubusercontent.com/arvindinfa/python-app/main/templates/python-aks-template/template.yaml

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  cors:
    origin: http://localhost:3000
    methods: [GET, POST, PUT, DELETE]
    credentials: true

database:
  client: better-sqlite3
  connection: ':memory:'

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

catalog:
  locations:
    - type: url
      target: https://github.com/arvindinfa/python-app/blob/main/catalog-info.yaml

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

auth:
  providers:
    guest: {}

scaffolder: {}
======================




## **Step 1: Set up the Project Structure**

Create a directory for your template:

```bash
mkdir -p ~/backstage-templates/python-aks-azdo-template/skeleton
cd ~/backstage-templates/python-aks-azdo-template
```

---

## **Step 2: Add Skeleton Files**

Inside `skeleton/`, add these files:

---

### **skeleton/app.py**

```python
from flask import Flask
app = Flask(__name__)

@app.route("/")
def home():
    return "Hello, Backstage from Ubuntu!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=80)
```

---

### **skeleton/Dockerfile**

```Dockerfile
FROM python:3.11-slim
COPY app.py .
RUN pip install flask
CMD ["python", "app.py"]
```

---

### **skeleton/deployment.yaml**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ parameters.repoName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${{ parameters.repoName }}
  template:
    metadata:
      labels:
        app: ${{ parameters.repoName }}
    spec:
      containers:
      - name: app
        image: ${{ parameters.dockerImage }}
        ports:
        - containerPort: 80
```

---

### **skeleton/service.yaml**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: ${{ parameters.repoName }}
spec:
  selector:
    app: ${{ parameters.repoName }}
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
```

---

### **skeleton/azure-pipelines.yml**

```yaml
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: pip install flask
  displayName: 'Install Flask'

- script: |
    docker build -t ${{ parameters.dockerImage }} .
    docker login -u $(DOCKER_USER) -p $(DOCKER_PASS) $(DOCKER_REGISTRY)
    docker push ${{ parameters.dockerImage }}
  env:
    DOCKER_USER: $(DOCKER_USER)
    DOCKER_PASS: $(DOCKER_PASS)
    DOCKER_REGISTRY: $(DOCKER_REGISTRY)
  displayName: 'Build and Push Docker Image'

- task: Kubernetes@1
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: 'YOUR-SERVICE-CONNECTION-NAME'
    azureResourceGroup: 'YOUR-RESOURCE-GROUP'
    kubernetesCluster: 'YOUR-AKS-CLUSTER-NAME'
    namespace: default
    command: apply
    useConfigurationFile: true
    configuration: deployment.yaml
```

> ⚠️ Update the Azure details to fit your environment.

---

### **skeleton/catalog-info.yaml**

```yaml
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ parameters.repoName }}
  description: Python App deployed via Backstage template (Ubuntu example)
spec:
  type: service
  owner: your-team
  lifecycle: experimental
```

---

### **skeleton/README.md**

```markdown
# ${{ parameters.repoName }}

This Python app is scaffolded by Backstage, with CI/CD via Azure DevOps and K8s deployment.
```

---

## **Step 3: Add Your Template YAML**

In the **parent directory** (`python-aks-azdo-template/`), add `template.yaml`:

```yaml
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-aks-azdo-template
  title: Python App on AKS with Azure DevOps (Ubuntu Example)
  description: Scaffold a Python app, Dockerfile, Azure DevOps pipeline, and AKS deployment.

spec:
  owner: your-team
  type: service

  parameters:
    - title: Project Info
      required: [repoName, dockerImage]
      properties:
        repoName:
          title: GitHub Repository Name
          type: string
        dockerImage:
          title: Docker Image Name (eg: myacr.azurecr.io/myapp:latest)
          type: string

  steps:
    - id: fetch-base
      name: Fetch template skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          repoName: ${{ parameters.repoName }}
          dockerImage: ${{ parameters.dockerImage }}

    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        repoUrl: github.com?owner=YOUR_ORG&repo=${{ parameters.repoName }}
        defaultBranch: main
        description: Python app scaffolded via Backstage

    - id: register
      name: Register in Backstage Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}

  output:
    links:
      - title: GitHub Repo
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: View in Catalog
        url: /catalog/default/component/${{ parameters.repoName }}
```

> Replace `YOUR_ORG` with your GitHub org or username.

---

## **Step 4: Register Your Template in Backstage**

* Copy the whole `python-aks-azdo-template` directory to your Backstage `templates` folder.
* Add its path to the Backstage catalog in `app-config.yaml` (if using local templates):

```yaml
catalog:
  locations:
    - type: file
      target: /path/to/your/templates/python-aks-azdo-template/template.yaml
```

---

## **Step 5: Test the Portal**

1. **Restart your Backstage backend:**

   ```bash
   cd /path/to/backstage
   yarn start-backend
   ```
2. **Open Backstage in your browser:**
   `http://localhost:3000/create`
3. **Select your template, enter repo name and Docker image name,** and follow the flow.

---

## **What This Will Do**

* **Clone your skeleton**, fill in the variables,
* **Push code and pipeline** to a new GitHub repo,
* **Register the service** in the Backstage catalog,
* **Pipeline will build Docker image and deploy to AKS** (if configured).




app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  reading:
    allow:
      - host: github.com
      - host: raw.githubusercontent.com
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
 # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: 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
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
		- allow: [Template]

    - type: url
      target: https://raw.githubusercontent.com/arvindinfa/python-app/main/templates/python-aks-template/template.yaml
    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # Experimental: Always use the search method in UrlReaderProcessor.
  useUrlReadersSearch: true

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true








===============

app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  reading:
    allow:
      - host: github.com
      - host: raw.githubusercontent.com
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: 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
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    - type: url
      target: https://raw.githubusercontent.com/arvindinfa/python-app/main/templates/python-aks-template/template.yaml

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # Experimental: Always use the search method in UrlReaderProcessor.
  useUrlReadersSearch: true

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true



oot@Testvm:~# npx @backstage/create-app
/root/.npm/_npx/4b6007f065a0ee27/node_modules/commander/lib/command.js:396
    enableOrNameAndArgs = enableOrNameAndArgs ?? 'help [command]';
                                               ^

SyntaxError: Unexpected token '?'
    at wrapSafe (internal/modules/cjs/loader.js:915:16)
    at Module._compile (internal/modules/cjs/loader.js:963:27)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)
    at Module.load (internal/modules/cjs/loader.js:863:32)
    at Function.Module._load (internal/modules/cjs/loader.js:708:14)
    at Module.require (internal/modules/cjs/loader.js:887:19)
    at require (internal/modules/cjs/helpers.js:85:18)
    at Object.<anonymous> (/root/.npm/_npx/4b6007f065a0ee27/node_modules/commander/index.js:2:21)
    at Module._compile (internal/modules/cjs/loader.js:999:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)


# Remove old node (optional, but recommended)
sudo apt-get remove nodejs

# Install NodeSource setup script for Node 20 (LTS)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -

# Install nodejs
sudo apt-get install -y nodejs

# Check version
node -v

root@Testvm:~# npx @backstage/create-app
Command 'npx' not found, but can be installed with:
apt install npm
root@Testvm:~# apt install npm
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
Some packages could not be installed. This may mean that you have
requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:

The following packages have unmet dependencies:
 npm : Depends: node-agent-base but it is not going to be installed
       Depends: node-aproba but it is not going to be installed
       Depends: node-archy but it is not going to be installed
       Depends: node-cacache but it is not going to be installed
       Depends: node-chalk but it is not going to be installed
       Depends: node-cli-table3
       Depends: node-colors but it is not going to be installed
       Depends: node-columnify but it is not going to be installed
       Depends: node-debug but it is not going to be installed
       Depends: node-emoji-regex
       Depends: node-got but it is not going to be installed
       Depends: node-graceful-fs but it is not going to be installed
       Depends: node-gyp but it is not going to be installed
       Depends: node-https-proxy-agent but it is not going to be installed
       Depends: node-mkdirp but it is not going to be installed
       Depends: node-ms but it is not going to be installed
       Depends: node-nopt but it is not going to be installed
       Depends: node-normalize-package-data but it is not going to be installed
       Depends: node-npm-package-arg but it is not going to be installed
       Depends: node-npmlog but it is not going to be installed
       Depends: node-read-package-json but it is not going to be installed
       Depends: node-rimraf but it is not going to be installed
       Depends: node-semver but it is not going to be installed
       Depends: node-ssri but it is not going to be installed
       Depends: node-string-width but it is not going to be installed
       Depends: node-strip-ansi but it is not going to be installed
       Depends: node-tar but it is not going to be installed
       Depends: node-validate-npm-package-name but it is not going to be installed
       Depends: node-which but it is not going to be installed
       Depends: node-write-file-atomic but it is not going to be installed
       Depends: nodejs:any (>= 10)
       Recommends: node-tap but it is not going to be installed
E: Unable to correct problems, you have held broken packages.

Remove old nodejs/npm (if any):

bash
Copy
Edit
apt-get remove --purge nodejs npm
apt-get autoremove
Install Node.js LTS (includes npm):

bash
Copy
Edit
curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
apt-get install -y nodejs
Check versions:

bash
Copy
Edit
node -v
npm -v


lsof -i :3000

  https://raw.githubusercontent.com/arvindinfa/python-app/main/catalog-info.yaml
  
   https://github.com/arvindinfa/python-app/main/catalog-info.yaml
kill -9 1389
